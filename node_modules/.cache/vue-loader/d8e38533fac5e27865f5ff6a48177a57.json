{"remainingRequest":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/src/views/curso/Tema1.vue?vue&type=template&id=38827e28&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/src/views/curso/Tema1.vue","mtime":1747358854520},{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Estimulacion_Temprana/U1_Estimulacion_Temprana/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}